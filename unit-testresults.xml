<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="11" time="0.397" timestamp="2022-06-04T21:42:36.053869" hostname="Preetham"><testcase classname="test.test_data_helper" name="test_dataset_name_unix" time="0.003" /><testcase classname="test.test_data_helper" name="test_dataset_name_win" time="0.001" /><testcase classname="test.test_data_helper" name="test_iso8601_to_epoch_ms" time="0.004" /><testcase classname="test.test_data_helper" name="test_map_to_app_insight_entry_for_aml_parent_run" time="0.003" /><testcase classname="test.test_history_helper" name="test_get_epoch_list" time="0.001" /><testcase classname="test.test_history_helper" name="test_get_accuracy_list" time="0.001" /><testcase classname="test.test_history_helper" name="test_get_accuracy_per_epoch" time="0.001" /><testcase classname="test.test_history_helper" name="test_get_accuracy_per_epoch_method_calls" time="0.002" /><testcase classname="test.test_image_helper" name="test_image_helper_function" time="0.002"><failure message="PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\preet\\Desktop\\CodeChallenge\\CapChallenge\\test\\test_data'">def test_image_helper_function():
        # prep
        attribute = "accuracy"
        history_dictionary = {
            attribute: [5, 6, 7, 8, 9]
        }
        history_obj = history()
        history_obj.set_history(history_dictionary)
    
        current_dir = os.getcwd()
        image_folder = os.path.join(os.path.join(current_dir, "test"), "test_data")
        image_name = "test_image.png"
        title = "Sample Image"
        y_label = "Accuracy"
        x_label = "epochs"
        legend_location = "upper left"
        colour = "r"
    
        if os.path.exists(image_folder) is False:
            os.mkdir(image_folder)
    
        expected_response = os.path.join(image_folder, image_name)
    
        # act
        actual_response = get_image(history=history_obj, attribute=attribute,
                                    image_folder=image_folder, image_name=image_name,
                                    title=title, y_label=y_label, x_label=x_label,
                                    legend_location=legend_location, colour=colour)
    
        # assert
        assert actual_response == expected_response
        assert os.path.isfile(actual_response)
    
        # clean-up
        os.remove(actual_response)
&gt;       os.removedirs(image_folder)

C:\Users\preet\Desktop\CodeChallenge\CapChallenge\test\test_image_helper.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'C:\\Users\\preet\\Desktop\\CodeChallenge\\CapChallenge\\test\\test_data'

    def removedirs(name):
        """removedirs(name)
    
        Super-rmdir; remove a leaf directory and all empty intermediate
        ones.  Works like rmdir except that, if the leaf directory is
        successfully removed, directories corresponding to rightmost path
        segments will be pruned away until either the whole path is
        consumed or an error occurs.  Errors during this latter phase are
        ignored -- they generally mean that a directory was not empty.
    
        """
&gt;       rmdir(name)
E       PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\preet\\Desktop\\CodeChallenge\\CapChallenge\\test\\test_data'

C:\Users\preet\Anaconda3\envs\AudiPMTTechChallenge\lib\os.py:241: PermissionError</failure></testcase><testcase classname="test.test_image_helper" name="test_image_helper_defaults" time="0.001"><failure message="FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\Users\\preet\\Desktop\\CodeChallenge\\CapChallenge\\test\\test_data\\test\\test_data'">def test_image_helper_defaults():
        # prep
        attribute = "accuracy"
        history_dictionary = {
            attribute: [5, 6, 7, 8, 9]
        }
        history_obj = history()
        history_obj.set_history(history_dictionary)
    
        current_dir = os.getcwd()
        image_folder = os.path.join(os.path.join(current_dir, "test"), "test_data")
        image_name = "test_image.png"
        title = "Sample Image"
        y_label = "Accuracy"
    
        if os.path.exists(image_folder) is False:
&gt;           os.mkdir(image_folder)
E           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\Users\\preet\\Desktop\\CodeChallenge\\CapChallenge\\test\\test_data\\test\\test_data'

C:\Users\preet\Desktop\CodeChallenge\CapChallenge\test\test_image_helper.py:62: FileNotFoundError</failure></testcase><testcase classname="test.test_image_helper" name="test_image_helper_exception" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">def test_image_helper_exception():
        # prep
        attribute = "accuracy"
        history_dictionary = {
            attribute: [5, 6, 7, 8, 9]
        }
        history_obj = history()
        history_obj.set_history(history_dictionary)
    
        current_dir = os.getcwd()
        image_folder = os.path.join(os.path.join(current_dir, "test"), "test_data")
        image_name = "test_image.png"
        title = "Sample Image"
        y_label = "Accuracy"
    
        if os.path.exists(image_folder) is True:
            try:
                shutil.rmtree(image_folder)
            except OSError as e:
                print("Error: %s - %s." % (e.filename, e.strerror))
    
        # act assert
        with pytest.raises(ValueError):
&gt;           get_image(history=history_obj, attribute=attribute,
                      image_folder=image_folder, image_name=image_name,
                      title=title, y_label=y_label)
E           Failed: DID NOT RAISE &lt;class 'ValueError'&gt;

C:\Users\preet\Desktop\CodeChallenge\CapChallenge\test\test_image_helper.py:103: Failed</failure></testcase></testsuite></testsuites>